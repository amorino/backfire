const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');

// PostCSS plugins
const cssnext = require('postcss-cssnext');
const postcssFocus = require('postcss-focus');
const postcssReporter = require('postcss-reporter');
const postcssSimpleVars = require('postcss-simple-vars');
const postcssNested = require('postcss-nested');
const postcssMixins = require('postcss-mixins');
const rucksack = require('rucksack-css');
const lost = require('lost');

module.exports = require('./webpack.base.babel')({
  type: 'development',
  devtool: 'inline-source-map',
  output: { // Compile into js/build.js
    path: path.resolve(__dirname, '..', 'build'),
    filename: 'js/[name].js',
    chunkFilename: 'js/[name].chunk.js',
    publicPath: 'http://localhost:5000/'
  },
  // Add hot reloading in development
  entry: [
    'eventsource-polyfill', // necessary for hot reloading with IE
    'webpack-hot-middleware/client',
    path.join(__dirname, '..', 'app/app.js') // Start with js/app.js
  ],
  // Load the CSS in a style tag in development
  cssLoaders: 'style!css?importLoaders=1&sourceMap!postcss',
  // Load Stylus with SourceMaps
  stylusLoaders: 'style!css?modules&importLoaders=1&sourceMap&localIdentName=[local]___[hash:base64:10]!stylus',
  // Process the CSS with PostCSS
  postcssPlugins: [
    lost(),
    postcssSimpleVars(),
    postcssNested(),
    postcssMixins(),
    postcssFocus(), // Add a :focus to every :hover
    cssnext({ // Allow future CSS features to be used, also auto-prefixes the CSS...
      browsers: ['last 2 versions', 'IE 8'] // ...based on this browser list
    }),
    rucksack(),
    postcssReporter({ // Posts messages from plugins to the terminal
      clearMessages: true
    })
  ],
  stylusPlugins: [
    lost(),
    postcssFocus(), // Add a :focus to every :hover
    cssnext({ // Allow future CSS features to be used, also auto-prefixes the CSS...
      browsers: ['last 2 versions', 'IE 8'] // ...based on this browser list
    }),
    rucksack({
      autoprefixer: true
    })
  ],
  // Add hot reloading
  plugins: [
    new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
    new webpack.NoErrorsPlugin(),
    new HtmlWebpackPlugin({
      template: 'app/index.html',
      inject: true // Inject all files that are generated by webpack, e.g. bundle.js
    })
  ]
});
